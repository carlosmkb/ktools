#!/bin/bash
#############################################
##   author: Carlos Mendes                 ##
##                                         ##
##   email: carlos.mendes@kelvininc.com    ##
##   slack: carlos.mendes                  ##
##   creation date: 2020/02/04             ##
#############################################
[[ "$DEBUG" == "true" ]] && set -x


usage="
Usage:
  tsecret --config <config_file>

Options:
  -f|--config <config_file>  yaml file with 'tsecret' configuration

  -h|--help                  show this help
"

while [[ $# > 0 ]]; do
  argumment="$1"
  case $argumment in
    -f|--config)
      if [[ ! -z "$2" && "${2::1}" != "-" ]]; then
        config_file="$2" 
        shift
      else
        echo "error: missing config file argument"
        invalid=1
      fi ;;
    -h|--help)
      echo "$usage"
      exit 0;;
    -*) echo "error: unknown flag '$argumment'"; invalid=1 ;;
    *)  echo "error: unknown argument '$argumment'"; invalid=1 ;;
  esac
  shift
done

if [[ $invalid -eq 1 ]]; then
  echo "$usage"
  exit 1
fi

if [[ ! -f "$config_file" ]]; then
  echo -e "error: config file '$config_file' not found\n"
  exit 1
fi

if cat "$config_file" | yq empty; then
  echo "$(date +'%Y/%m/%dT%H:%M:%S') I readgin config from '$(realpath "$config_file")'"

  for secret in $(cat "$config_file" | yq -r '.secrets[] | @base64'); do
    _filters=""
    _command=""
    _secret_data=""
    _secret_labels=""

    secret="$(echo "$secret" | base64 --decode)"

    secret_name="$(echo "$secret" | yq -r '.name' 2> /dev/null)"
    
    if [[ -z "${secret_name//null}" ]]; then
      echo "$(date +'%Y/%m/%dT%H:%M:%S') E .name not defined"
      exit 1
    fi

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I ---------------------------------------------"
    echo "$(date +'%Y/%m/%dT%H:%M:%S') I processing secret '$secret_name'"

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I parsing secret config"

    aws_filters="$(echo "$secret" | yq -r '.aws_filters[] | @base64' 2> /dev/null)"
    secret_namespace="$(echo "$secret" | yq -r '.namespace' 2> /dev/null)"
    secret_update="$(echo "$secret" | yq -r '.update' 2> /dev/null)"
    secret_labels=$(echo "$secret" | yq -r '.labels | to_entries[] | @base64' 2> /dev/null)
    secret_keys=$(echo "$secret" | yq -r '.keys[] | @base64' 2> /dev/null)
    
    if [[ -z "${aws_filters//null}" ]]; then
      echo "$(date +'%Y/%m/%dT%H:%M:%S') E .aws_filters not defined"
      exit 1
    fi
    
    if [[ -z "${secret_keys//null}" ]]; then
      echo "$(date +'%Y/%m/%dT%H:%M:%S') E .keys not defined"
      exit 1
    fi

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I parsing tag filters"

    for _filter in $aws_filters; do
      _filter_key="$(echo "$_filter" | base64 --decode | jq -r '.key')"
      _filter_value="$(echo "$_filter" | base64 --decode | jq -r '.value')"

      _filters+="Name=$_filter_key,Values=$_filter_value "
    done

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I getting instance info"

    json="$(aws ec2 describe-instances --filters $_filters --output json)"

    _instance_id="$(echo "$json" | jq -r '.Reservations[0].Instances[0].InstanceId')"
    echo "$(date +'%Y/%m/%dT%H:%M:%S') I instace '$_instance_id' selected"

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I parsing secret labels"

    for _label in $secret_labels; do
      _label_key="$(echo "$_label" | base64 --decode | jq -r '.key')"
      _label_value="$(echo "$_label" | base64 --decode | jq -r '.value')"
      
      _secret_labels+="$_label_key: $_label_value\n"
    done

    if [[ -z "${_secret_labels//null}" ]]; then
      echo "$(date +'%Y/%m/%dT%H:%M:%S') I no labels defined"
      _secret_labels="{}"
    else
      _secret_labels="${_secret_labels::-2}"
    fi

    echo "$(date +'%Y/%m/%dT%H:%M:%S') I parsing secret keys"

    for key in $secret_keys; do
      _secret_key="$(echo "$key" | base64 --decode | jq -r '.name')"
      _from_tag="$(echo "$key" | base64 --decode | jq -r '.from_tag')"

      _secret_value="$(echo "$json" | jq -r --arg tag $_from_tag '.Reservations[0].Instances[0].Tags[] | select(.Key==$tag).Value' | base64 | tr -d '\n')"

      if [[ -z "$_secret_value" ]]; then
        echo "$(date +'%Y/%m/%dT%H:%M:%S') W tag '$_from_tag' not found on instance '$_instance_id'"
      fi 
      
      _secret_data+="$_secret_key: $_secret_value\n"
    done

    if [[ -z "${secret_namespace//null}" ]]; then
      secret_namespace="''"
      echo "$(date +'%Y/%m/%dT%H:%M:%S') I .namespace not defined, using current namespace"
    fi

    if [[ ! -z "$_secret_data" ]]; then
      _secret_data="${_secret_data::-2}"

      if [[ "$secret_update" == "true" ]]; then
        _command="apply"
        echo "$(date +'%Y/%m/%dT%H:%M:%S') I creating/updating secret '$secret_name'"
      else
        _command="create"
        echo "$(date +'%Y/%m/%dT%H:%M:%S') I creating secret '$secret_name'"
      fi

      out="$(cat <<EOF | kubectl $_command -f - 2>&1
kind: Secret
apiVersion: v1
metadata:
  name: $secret_name
  namespace: $secret_namespace
  labels: $(echo -e "\n$_secret_labels" | sed -r "s/^/    /g")
data: $(echo -e "\n$_secret_data" | sed -r "s/^/  /g")
EOF
)"

      if [[ $? -eq 0 ]]; then
        if ! echo "$out" | egrep -iqs "^warn"; then
          echo "$out" | sed -r "s|^|$(date +'%Y/%m/%dT%H:%M:%S') I |g"
        else
          echo "$out" | sed -r "s|^|$(date +'%Y/%m/%dT%H:%M:%S') W |g"
        fi
      else
        echo "$out" | sed -r "s|^|$(date +'%Y/%m/%dT%H:%M:%S') E |g"
        exit 1
      fi
    else
      echo "$(date +'%Y/%m/%dT%H:%M:%S') E no selected tags found on instance '$_instance_id'"
      exit 1
    fi
  done
else
  echo "$(date +'%Y/%m/%dT%H:%M:%S') E invalid yaml on config file"
  exit 1
fi


exit 0
